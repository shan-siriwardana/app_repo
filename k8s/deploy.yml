apiVersion: apps/v1
kind: Deployment
metadata:
  name: demoapp-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: demoapp
  template:
    metadata:
      labels:
        app: demoapp
    spec:
      containers:
      - name: demoapp
        image: {GCP_REGION}-docker.pkg.dev/{GCP_PROJECT_ID}/{GCP_AF_REPO}/{GCP_AF_REGISTRY}:{IMAGE_TAG}
        ports:
        - containerPort: 3000
        args: 
        - "serve"
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
      initContainers:
      - name: init
        image: {GCP_REGION}-docker.pkg.dev/{GCP_PROJECT_ID}/{GCP_AF_REPO}/{GCP_AF_REGISTRY}:{IMAGE_TAG}
        command: ["/bin/sh", "-c"]
        args:
          - |
            export PGHOST=$(cat ./conf.toml |  grep DbHost | awk -F' = "' '{print $2}' | awk -F"\"" '{print $1}' )
            export PGDATABASE=$(cat ./conf.toml |  grep DbName | awk -F' = "' '{print $2}' | awk -F"\"" '{print $1}')
            export PGUSER=$(cat ./conf.toml |  grep DbUser | awk -F' = "' '{print $2}' | awk -F"\"" '{print $1}')
            export PGPASSWORD=$(cat ./conf.toml |  grep DbPassword | awk -F' = "' '{print $2}' | awk -F"\"" '{print $1}')
            if psql -h $PGHOST -d $PGDATABASE -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'tasks');" --tuples-only --no-align | grep -q "t";
            then
              echo "table found";
            else
              ./TechChallengeApp updatedb -s
            fi