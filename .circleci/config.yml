# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      - image: cimg/go:1.19

    steps:
      - checkout

      - run: 
          name: Build & test the executable for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            go get -v -t -d ./...
            go install github.com/GeertJohan/go.rice/rice@latest
            mkdir output

            # echo "v0.14.5" > versionfile
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            go test -v -race -cover ./...

            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile

            cp TechChallengeApp dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go install github.com/tcnksm/ghr@latest

              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u shan-siriwardana ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u shan-siriwardana -prerelease ${version} output
              fi
            fi

      - store_artifacts:
          path: output
      - persist_to_workspace:
          root: .
          paths:
            - versionfile

  dockerize:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Build and tag the docker image
      - setup_remote_docker
      - run:
          name: Build and tag Docker image
          command: |
            sed -i 's/{DB_USER}/'"$DB_USER"'/g; s/{DB_PASSWORD}/'"$DB_PASSWORD"'/g; s/{DB_HOST}/'"$DB_HOST"'/g' conf.toml
            version=$(cat versionfile)
            docker build --build-arg arch=amd64 -t ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_AF_REPO}/${GCP_AF_REGISTRY}:${version} .
            docker images
      # Authenticate with GCP and push the image to the Artifact Registry
      - run:
          name: Push Docker image to GCP Artifact Registry
          command: |
            version=$(cat versionfile)
            echo ${GCLOUD_SERVICE_ACCOUNT_KEY} > key.json
            gcloud auth activate-service-account --key-file=./key.json
            gcloud auth configure-docker ${GCP_REGION}-docker.pkg.dev
            docker push ${GCP_REGION}-docker.pkg.dev/${GCP_PROJECT_ID}/${GCP_AF_REPO}/${GCP_AF_REGISTRY}:${version}
  
  deploy:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Configure gcloud CLI
          command: |
            echo ${GCLOUD_SERVICE_ACCOUNT_KEY} > key.json
            gcloud auth activate-service-account --key-file=./key.json
            gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GCP_PROJECT_ID}
      - run:
          name: Apply deployment and service manifests
          command: |
            version=$(cat versionfile)
            sed -i 's/{GCP_REGION}/'"$GCP_REGION"'/g; s/{GCP_PROJECT_ID}/'"$GCP_PROJECT_ID"'/g; s/{GCP_AF_REPO}/'"$GCP_AF_REPO"'/g; s/{GCP_AF_REGISTRY}/'"$GCP_AF_REGISTRY"'/g; s/{IMAGE_TAG}/'"$version"'/g' k8s/deploy.yml
            kubectl apply -f k8s/deploy.yml
            kubectl apply -f k8s/hpa.yml
            kubectl apply -f k8s/service.yml
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - dockerize:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - deploy:
          requires: 
            - dockerize
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/