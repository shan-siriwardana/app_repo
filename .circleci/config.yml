# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      - image: cimg/go:1.19

    steps:
      - checkout

      - run: 
          name: Build & test the executable for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            # go get -v -t -d ./...
            # go install github.com/GeertJohan/go.rice/rice@latest
            mkdir output

            echo "v0.12.0" > versionfile
            
            # go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            # pushd ui
            # rice append --exec ../TechChallengeApp
            # popd

            # go test -v -race -cover ./...

            # ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile

            # cp TechChallengeApp dist/
            # cp conf.toml dist/
            
            # rm TechChallengeApp

            # export version=$(cat versionfile)
            
            # zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

      # - run:
      #     name: Release if new version
      #     command: |
      #       export version=$(cat versionfile)
      #       echo $version
      #       export tagvalue=$(git tag | grep ${version})
      #       export prerelease=$(echo ${version} | grep 'pre-release')
      #       if [ -z "${tagvalue}" ]; then
      #         go install github.com/tcnksm/ghr@latest

      #         if [ -z "${prerelease}" ]; then
      #           echo "No pre-release in version, creating release"
      #           ghr -u shan-siriwardana ${version} output
      #         else
      #           echo "Found pre-release in version, creating pre-release"
      #           ghr -u shan-siriwardana -prerelease ${version} output
      #         fi
      #       fi

      - store_artifacts:
          path: output
      - persist_to_workspace:
          root: .
          paths:
            - versionfile

  dockerize:
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Build and tag the docker image
      - setup_remote_docker
      - run:
          name: Build and tag Docker image
          command: |
            version=$(cat versionfile)
            docker build --build-arg arch=amd64 -t us-central1-docker.pkg.dev/tst-project-112334/demoapp/demoapp:${version} .
            docker images
      # Authenticate with GCP and push the image to the Artifact Registry
      - run:
          name: Push Docker image to GCP Artifact Registry
          command: |
            # Install gcloud CLI
            # export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            # echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            # curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            # apt-get update && apt-get install -y google-cloud-sdk
            echo ${GCLOUD_SERVICE_KEY} > key.json
            gcloud auth activate-service-account --key-file=key.json
            gcloud auth configure-docker
            docker push us-central1-docker.pkg.dev/tst-project-112334/demoapp/demoapp:${version} .
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
      - dockerize:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/